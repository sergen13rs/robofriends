{"version":3,"sources":["containers/App.module.css","components/RobotList.module.css","components/SearchBox.module.css","components/Header.module.css","components/RobotCard.js","components/RobotList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Header.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","serviceWorkerRegistration.js","index.js","components/RobotCard.module.css"],"names":["module","exports","RobotCard","name","email","img","className","classes","Card","alt","src","Name","Email","RobotList","robots","CardsList","map","robot","index","SearchBox","onChange","Input","type","placeholder","ErrorBoundary","state","hasError","error","issue","this","setState","props","children","Component","Header","memo","RoboFriends","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","searchValue","payload","fetch","then","response","json","data","catch","useEffect","filteredRobots","filter","r","toLowerCase","includes","App","event","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b0eab11d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1IQbR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardsList\":\"RobotList_CardsList__3-fXE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"SearchBox_Input__3jPGs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RoboFriends\":\"Header_RoboFriends__rPhZw\"};","import classes from './RobotCard.module.css';\n\nconst RobotCard = ({name, email, img}) => {\n  return (\n    <div className={classes.Card}>\n      <img alt={name} src={img} />\n      <span className={classes.Name}>{name}</span>\n      <span className={classes.Email}>{email}</span>\n    </div>\n  );\n};\n\nexport default RobotCard;\n","import classes from \"./RobotList.module.css\";\n\nimport RobotCard from './RobotCard';\n\nconst RobotList = ({ robots }) => {\n  // if (true) {\n  //   throw new Error('Noooooo!');\n  // }\n  return (\n    <div className={classes.CardsList}>\n      {\n        robots.map((robot, index) => (\n          <RobotCard\n            key={robot.email}\n            img={`https://robohash.org/${index}?size=200x200`}\n            name={robot.name}\n            email={robot.email}\n          />\n        ))\n      }\n    </div>\n  )\n};\n\nexport default RobotList;\n","import classes from './SearchBox.module.css';\n\nconst SearchBox = ({onChange}) => {\n  return (\n    <input\n      className={classes.Input}\n      type='search'\n      placeholder=\"Search name ...\"\n      onChange={onChange}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  state = {\n    hasError: false,\n  };\n\n  componentDidCatch(error, issue) {\n    this.setState({\n      hasError: true\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Some error was happened</h1>;\n    }\n    return this.props.children;\n  };\n}\n\nexport default ErrorBoundary;\n","import { memo } from 'react';\nimport classes from './Header.module.css';\n\nconst Header = memo(() => {\n  return <span className={classes.RoboFriends}>robofriends</span>;\n});\n\nexport default Header;\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import { useEffect } from 'react'\nimport { connect } from 'react-redux';\n\nimport classes from './App.module.css';\n\nimport RobotList from '../components/RobotList';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nimport { setSearchField, requestRobots } from '../actions';\n\n\nfunction App({searchField, onSearchChange, robots, requestRobots}) {\n\n  useEffect(() => {\n    requestRobots();\n  }, [requestRobots]);\n\n  const searchHandler = (event) => {\n    onSearchChange(event.target.value);\n  }\n\n  const filteredRobots = robots.filter(r => r.name.toLowerCase().includes(searchField.toLowerCase()));\n\n  return (\n    <div className={classes.App}>\n      <Header />\n      <SearchBox onChange={searchHandler} />\n      <ErrorBoundary>\n        <RobotList robots={filteredRobots} />\n      </ErrorBoundary>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (searchValue) => dispatch(setSearchField(searchValue)),\n  requestRobots: () => dispatch(requestRobots())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\"\n\nconst initialStateSearch = {\n  searchField: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD: {\n      return {\n        ...state,\n        searchField: action.payload\n      }\n    }\n    default: {\n      return state\n    }\n  };\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\nexport const requestRobots = (state = initialStateRobots, action) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING: {\n      return {\n        ...state,\n        isPending: true,\n        error: ''\n      }\n    }\n    case REQUEST_ROBOTS_SUCCESS: {\n      return {\n        ...state,\n        isPending: false,\n        robots: action.payload\n      }\n    }\n    case REQUEST_ROBOTS_FAILED: {\n      return {\n        ...state,\n        isPending: false,\n        error: action.payload\n      }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(\n  applyMiddleware(thunkMiddleware)\n));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"RobotCard_Card__2YKnv\",\"Name\":\"RobotCard_Name__1vSql\",\"Email\":\"RobotCard_Email__2YKhW\"};"],"sourceRoot":""}